=====Stat Rules=====
Ability Scores start at 10
Apply 3 ability boosts (+2) and 1 ability flaw (-2) according to the ancestry
	Or 2 boosts and no flaw (Humans have no set flaws)
Add 2 boosts according to the background
Add 1 boost according to the character's class
Add 4 distinct boosts according to the user's choice
add voluntary flaws if desired (no more than 1 flaw per stat)
1st level scores min 8, max 18
After 18 at higher levels, boosts only add +1 (?)

	Modifiers auto generated by stats
	(stat/2 - 5) work in TypeScript? (9/2 - 5) (10/2 - 5) (11/2 - 5) (12/2 - 5); -1 0 0 1

HP based on ancestral HP + class HP

=====Functions=====
Import and export character sheets
Dice rolling
Three modes of generating stats:
	Custom input (just let them type them in and bound them)
	Generation (start at 10 and go through steps to add boosts/flaws)
	Roll stats (roll 4d6 6 times, drop the lowest d6 for each)
		Then generate (free boosts if set boosts would exceed 18)
	

=====Implementation=====


=====Schema=====
table characterSheet
	String name (PK):
	int level 1-20
	String class (FK to class):
	String ancestry (fk to ancestry);

table characterMain
	String name (PK/FK to characterSheet)
	int hp
	int str
	int dex
	int con
	int int
	int wis
	int cha

view characterModifier AS
	SELECT each stat AS (stat/2 - 5)

view characterSkills (proficiencies)
	Calc skill

table ancestry
	string name (PK);
	int speed
	int hp
	enum boost1
	enum boost2
	enum flaw

table class
	string name (PK)

table language
	String language
	String rarity

table ancestralLanguage
	String name (PK/ FK to ancestry)

table feat

table ancestralFeat
	String name (PK/FK to ancestry)


=====Future?=====

feats, languages, traits

New schema for users
	All characters have name/userID as primary key
	userID references user table